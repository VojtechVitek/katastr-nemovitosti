// Code generated by wsdl2go. DO NOT EDIT.

package ozsnotifikacesoap

import (
	"reflect"

	"github.com/fiorix/wsdl2go/soap"
)

// Namespace was auto-generated from WSDL.
var Namespace = "http://katastr.cuzk.cz/ozsNotifikaceWS/v2.6"

// NewOzsNotifikacePort creates an initializes a OzsNotifikacePort.
func NewOzsNotifikacePort(cli *soap.Client) OzsNotifikacePort {
	return &ozsNotifikacePort{cli}
}

// OzsNotifikacePort was auto-generated from WSDL
// and defines interface for the remote service. Useful for testing.
type OzsNotifikacePort interface {
	// VratNeodebraneZpravy was auto-generated from WSDL.
	VratNeodebraneZpravy(VratNeodebraneZpravyRequest *VratNeodebraneZpravyRequestType) (*VratZpravyResponseType, error)

	// VratOdebraneZpravy was auto-generated from WSDL.
	VratOdebraneZpravy(VratOdebraneZpravyRequest *VratOdebraneZpravyRequestType) (*VratZpravyResponseType, error)
}

// Date in WSDL format.
type Date string

// DateTime in WSDL format.
type DateTime string

// AdresaTypType was auto-generated from WSDL.
type AdresaTypType uint64

// Validate validates AdresaTypType.
func (v AdresaTypType) Validate() bool {
	for _, vv := range []uint64{
		1,
		2,
		3,
		4,
		5,
		6,
		7,
		8,
		9,
	} {
		if reflect.DeepEqual(v, vv) {
			return true
		}
	}
	return false
}

// AnoNeType was auto-generated from WSDL.
type AnoNeType string

// Validate validates AnoNeType.
func (v AnoNeType) Validate() bool {
	for _, vv := range []string{
		"a",
		"n",
	} {
		if reflect.DeepEqual(v, vv) {
			return true
		}
	}
	return false
}

// CastObceKodType was auto-generated from WSDL.
type CastObceKodType uint64

// CastObceNazevType was auto-generated from WSDL.
type CastObceNazevType string

// CenaType was auto-generated from WSDL.
type CenaType float64

// CharakteristikaOSKodType was auto-generated from WSDL.
type CharakteristikaOSKodType int

// CiselnikDatumType was auto-generated from WSDL.
type CiselnikDatumType DateTime

// CiselnikNazevType was auto-generated from WSDL.
type CiselnikNazevType string

// CisloBankUctuType was auto-generated from WSDL.
type CisloBankUctuType int64

// CisloDomovniType was auto-generated from WSDL.
type CisloDomovniType uint64

// CisloEvidencniType was auto-generated from WSDL.
type CisloEvidencniType uint64

// CisloJednaciType was auto-generated from WSDL.
type CisloJednaciType string

// CisloOrientacniType was auto-generated from WSDL.
type CisloOrientacniType string

// CisloPBPPType was auto-generated from WSDL.
type CisloPBPPType uint

// CisloStavbyType was auto-generated from WSDL.
type CisloStavbyType uint64

// CisloZPMZType was auto-generated from WSDL.
type CisloZPMZType uint

// CpCeType was auto-generated from WSDL.
type CpCeType string

// Validate validates CpCeType.
func (v CpCeType) Validate() bool {
	for _, vv := range []string{
		"1",
		"2",
	} {
		if reflect.DeepEqual(v, vv) {
			return true
		}
	}
	return false
}

// DatovaSchrankaIdType was auto-generated from WSDL.
type DatovaSchrankaIdType string

// DatumDoType was auto-generated from WSDL.
type DatumDoType DateTime

// DatumOdType was auto-generated from WSDL.
type DatumOdType DateTime

// DatumPozadavkuType was auto-generated from WSDL.
type DatumPozadavkuType DateTime

// DatumSpusteniType was auto-generated from WSDL.
type DatumSpusteniType DateTime

// DatumVytvoreniType was auto-generated from WSDL.
type DatumVytvoreniType DateTime

// DicType was auto-generated from WSDL.
type DicType string

// DmlOperaceKodType was auto-generated from WSDL.
type DmlOperaceKodType uint64

// DmlOperaceNazevType was auto-generated from WSDL.
type DmlOperaceNazevType string

// DokladCisloType was auto-generated from WSDL.
type DokladCisloType string

// DokladTypType was auto-generated from WSDL.
type DokladTypType string

// Validate validates DokladTypType.
func (v DokladTypType) Validate() bool {
	for _, vv := range []string{
		"P",
		"ID",
		"IR",
		"VS",
		"PS",
	} {
		if reflect.DeepEqual(v, vv) {
			return true
		}
	}
	return false
}

// DoplnekIcoType was auto-generated from WSDL.
type DoplnekIcoType uint64

// DoplnkovyPopisJpvType was auto-generated from WSDL.
type DoplnkovyPopisJpvType string

// DruhCislovaniParType was auto-generated from WSDL.
type DruhCislovaniParType string

// Validate validates DruhCislovaniParType.
func (v DruhCislovaniParType) Validate() bool {
	for _, vv := range []string{
		"1",
		"2",
	} {
		if reflect.DeepEqual(v, vv) {
			return true
		}
	}
	return false
}

// DruhDMLOperaceType was auto-generated from WSDL.
type DruhDMLOperaceType string

// Validate validates DruhDMLOperaceType.
func (v DruhDMLOperaceType) Validate() bool {
	for _, vv := range []string{
		"INS",
		"UPD",
		"DEL",
	} {
		if reflect.DeepEqual(v, vv) {
			return true
		}
	}
	return false
}

// DruhListinyKodType was auto-generated from WSDL.
type DruhListinyKodType string

// DruhPozemkuKodType was auto-generated from WSDL.
type DruhPozemkuKodType uint64

// DruhPozemkuNazevType was auto-generated from WSDL.
type DruhPozemkuNazevType string

// DruhUcastnikaType was auto-generated from WSDL.
type DruhUcastnikaType uint64

// Validate validates DruhUcastnikaType.
func (v DruhUcastnikaType) Validate() bool {
	for _, vv := range []uint64{
		1,
		2,
		3,
		4,
	} {
		if reflect.DeepEqual(v, vv) {
			return true
		}
	}
	return false
}

// DruhUdalostiType was auto-generated from WSDL.
type DruhUdalostiType string

// Validate validates DruhUdalostiType.
func (v DruhUdalostiType) Validate() bool {
	for _, vv := range []string{
		"INS",
		"UPD",
		"DEL",
	} {
		if reflect.DeepEqual(v, vv) {
			return true
		}
	}
	return false
}

// EmailType was auto-generated from WSDL.
type EmailType string

// ExtIdentifikaceRizeniType was auto-generated from WSDL.
type ExtIdentifikaceRizeniType string

// FaxTelefonType was auto-generated from WSDL.
type FaxTelefonType string

// FormatSestavyType was auto-generated from WSDL.
type FormatSestavyType string

// Validate validates FormatSestavyType.
func (v FormatSestavyType) Validate() bool {
	for _, vv := range []string{
		"pdf",
		"xml",
		"html",
	} {
		if reflect.DeepEqual(v, vv) {
			return true
		}
	}
	return false
}

// HesloType was auto-generated from WSDL.
type HesloType string

// IcoType was auto-generated from WSDL.
type IcoType uint64

// IdObjektuType was auto-generated from WSDL.
type IdObjektuType uint64

// IdPrilohyWSType was auto-generated from WSDL.
type IdPrilohyWSType uint64

// IdType was auto-generated from WSDL.
type IdType uint64

// JednotkaCisloType was auto-generated from WSDL.
type JednotkaCisloType uint

// JednotkaTypJednotkyKodType was auto-generated from WSDL.
type JednotkaTypJednotkyKodType uint64

// JednotkaTypJednotkyNazevType was auto-generated from WSDL.
type JednotkaTypJednotkyNazevType string

// JednotkaZpusobVyuzitiKodType was auto-generated from WSDL.
type JednotkaZpusobVyuzitiKodType uint64

// JednotkaZpusobVyuzitiNazevType was auto-generated from WSDL.
type JednotkaZpusobVyuzitiNazevType string

// JmenoType was auto-generated from WSDL.
type JmenoType string

// KatastrUzemiKodType was auto-generated from WSDL.
type KatastrUzemiKodType uint64

// KatastrUzemiNazevType was auto-generated from WSDL.
type KatastrUzemiNazevType string

// KategorieKodType was auto-generated from WSDL.
type KategorieKodType string

// KategorieNazevType was auto-generated from WSDL.
type KategorieNazevType string

// KodBankyType was auto-generated from WSDL.
type KodBankyType int

// KrajKodType was auto-generated from WSDL.
type KrajKodType uint64

// KrajNazevType was auto-generated from WSDL.
type KrajNazevType string

// LVCisloType was auto-generated from WSDL.
type LVCisloType uint64

// MapaFormatPapiruType was auto-generated from WSDL.
type MapaFormatPapiruType string

// Validate validates MapaFormatPapiruType.
func (v MapaFormatPapiruType) Validate() bool {
	for _, vv := range []string{
		"A3",
		"A4",
	} {
		if reflect.DeepEqual(v, vv) {
			return true
		}
	}
	return false
}

// MapaMeritkoType was auto-generated from WSDL.
type MapaMeritkoType uint64

// Validate validates MapaMeritkoType.
func (v MapaMeritkoType) Validate() bool {
	for _, vv := range []uint64{
		500,
		1000,
		2000,
	} {
		if reflect.DeepEqual(v, vv) {
			return true
		}
	}
	return false
}

// MapaSouradniceXType was auto-generated from WSDL.
type MapaSouradniceXType float64

// MapaSouradniceYType was auto-generated from WSDL.
type MapaSouradniceYType float64

// MapaTypBoduType was auto-generated from WSDL.
type MapaTypBoduType string

// Validate validates MapaTypBoduType.
func (v MapaTypBoduType) Validate() bool {
	for _, vv := range []string{
		"p",
		"s",
	} {
		if reflect.DeepEqual(v, vv) {
			return true
		}
	}
	return false
}

// MapaVzdalenostType was auto-generated from WSDL.
type MapaVzdalenostType float64

// MestskaCastKodType was auto-generated from WSDL.
type MestskaCastKodType uint64

// MestskaCastNazevType was auto-generated from WSDL.
type MestskaCastNazevType string

// MestskyObvodNazevType was auto-generated from WSDL.
type MestskyObvodNazevType string

// NKrajKodType was auto-generated from WSDL.
type NKrajKodType uint64

// NazevFirmyType was auto-generated from WSDL.
type NazevFirmyType string

// NazevReportuType was auto-generated from WSDL.
type NazevReportuType string

// NazevSouboruType was auto-generated from WSDL.
type NazevSouboruType string

// ObecKodType was auto-generated from WSDL.
type ObecKodType uint64

// ObecNazevType was auto-generated from WSDL.
type ObecNazevType string

// OkresKodType was auto-generated from WSDL.
type OkresKodType uint64

// OkresNazevType was auto-generated from WSDL.
type OkresNazevType string

// OperaceFunkceKod was auto-generated from WSDL.
type OperaceFunkceKod uint64

// OperaceRizeniKodType was auto-generated from WSDL.
type OperaceRizeniKodType uint64

// OperaceRizeniNazevType was auto-generated from WSDL.
type OperaceRizeniNazevType string

// OperaceRizeniStavType was auto-generated from WSDL.
type OperaceRizeniStavType string

// PSCType was auto-generated from WSDL.
type PSCType uint

// ParcelaDilType was auto-generated from WSDL.
type ParcelaDilType uint64

// ParcelaDruhPozemkuKodType was auto-generated from WSDL.
type ParcelaDruhPozemkuKodType uint64

// ParcelaKmenoveCisloType was auto-generated from WSDL.
type ParcelaKmenoveCisloType uint

// ParcelaPoddeleniType was auto-generated from WSDL.
type ParcelaPoddeleniType uint64

// ParcelaTypNazevType was auto-generated from WSDL.
type ParcelaTypNazevType string

// ParcelaTypType was auto-generated from WSDL.
type ParcelaTypType uint64

// ParcelaTypZEType was auto-generated from WSDL.
type ParcelaTypZEType uint64

// ParcelaTypeType was auto-generated from WSDL.
type ParcelaTypeType string

// Validate validates ParcelaTypeType.
func (v ParcelaTypeType) Validate() bool {
	for _, vv := range []string{
		"PKN",
		"PZE",
	} {
		if reflect.DeepEqual(v, vv) {
			return true
		}
	}
	return false
}

// ParcelaVymeraType was auto-generated from WSDL.
type ParcelaVymeraType uint

// ParcelaZpusobUrceniVymeryKodType was auto-generated from WSDL.
type ParcelaZpusobUrceniVymeryKodType uint

// ParcelaZpusobVyuzitiKodType was auto-generated from WSDL.
type ParcelaZpusobVyuzitiKodType uint64

// PocetStranType was auto-generated from WSDL.
type PocetStranType uint

// PodobaPoskytnutiType was auto-generated from WSDL.
type PodobaPoskytnutiType string

// Validate validates PodobaPoskytnutiType.
func (v PodobaPoskytnutiType) Validate() bool {
	for _, vv := range []string{
		"ELEKTRONICKA",
		"LISTINNA",
	} {
		if reflect.DeepEqual(v, vv) {
			return true
		}
	}
	return false
}

// PoradiTextJpvType was auto-generated from WSDL.
type PoradiTextJpvType string

// PracovisteDatovaSchrankaType was auto-generated from WSDL.
type PracovisteDatovaSchrankaType string

// PracovisteKodType was auto-generated from WSDL.
type PracovisteKodType uint64

// PracovisteNazevType was auto-generated from WSDL.
type PracovisteNazevType string

// PredcisliBankUctuType was auto-generated from WSDL.
type PredcisliBankUctuType int

// PredmetRizeniKodType was auto-generated from WSDL.
type PredmetRizeniKodType uint64

// PredmetRizeniNazevType was auto-generated from WSDL.
type PredmetRizeniNazevType string

// PrijmeniType was auto-generated from WSDL.
type PrijmeniType string

// RcType was auto-generated from WSDL.
type RcType string

// ReportStavType was auto-generated from WSDL.
type ReportStavType string

// Validate validates ReportStavType.
func (v ReportStavType) Validate() bool {
	for _, vv := range []string{
		"čeká",
		"vytváří se",
		"podepisuje se",
		"zpracován",
		"chyba při vytváření",
		"chyba při zpracování",
		"zaúčtován",
		"zrušen",
	} {
		if reflect.DeepEqual(v, vv) {
			return true
		}
	}
	return false
}

// RizeniCisloPodaniType was auto-generated from WSDL.
type RizeniCisloPodaniType string

// RizeniCisloType was auto-generated from WSDL.
type RizeniCisloType string

// RizeniCreateDateType was auto-generated from WSDL.
type RizeniCreateDateType DateTime

// RizeniPopisType was auto-generated from WSDL.
type RizeniPopisType string

// RizeniPoradoveCisloType was auto-generated from WSDL.
type RizeniPoradoveCisloType uint64

// RizeniPraresKodType was auto-generated from WSDL.
type RizeniPraresKodType uint64

// RizeniRokType was auto-generated from WSDL.
type RizeniRokType uint64

// RizeniUzisysUsernameType was auto-generated from WSDL.
type RizeniUzisysUsernameType string

// SestavyCisloJednaciType was auto-generated from WSDL.
type SestavyCisloJednaciType string

// SestavyMaxCenaType was auto-generated from WSDL.
type SestavyMaxCenaType uint

// SestavyPoradoveCisloType was auto-generated from WSDL.
type SestavyPoradoveCisloType string

// SestavyUcelKodType was auto-generated from WSDL.
type SestavyUcelKodType uint64

// StatKodType was auto-generated from WSDL.
type StatKodType uint

// StatNazevType was auto-generated from WSDL.
type StatNazevType string

// StavbaSoucastiType was auto-generated from WSDL.
type StavbaSoucastiType string

// Validate validates StavbaSoucastiType.
func (v StavbaSoucastiType) Validate() bool {
	for _, vv := range []string{
		"R",
		"P",
	} {
		if reflect.DeepEqual(v, vv) {
			return true
		}
	}
	return false
}

// TextType was auto-generated from WSDL.
type TextType string

// TitulPredJmenemType was auto-generated from WSDL.
type TitulPredJmenemType string

// TitulZaJmenemType was auto-generated from WSDL.
type TitulZaJmenemType string

// TypBankUctuType was auto-generated from WSDL.
type TypBankUctuType string

// Validate validates TypBankUctuType.
func (v TypBankUctuType) Validate() bool {
	for _, vv := range []string{
		"B",
		"I",
	} {
		if reflect.DeepEqual(v, vv) {
			return true
		}
	}
	return false
}

// TypJednotkyKodType was auto-generated from WSDL.
type TypJednotkyKodType uint64

// TypJednotkyNazevType was auto-generated from WSDL.
type TypJednotkyNazevType string

// TypKompreseType was auto-generated from WSDL.
type TypKompreseType string

// Validate validates TypKompreseType.
func (v TypKompreseType) Validate() bool {
	for _, vv := range []string{
		"ZIP",
		"GZIP",
	} {
		if reflect.DeepEqual(v, vv) {
			return true
		}
	}
	return false
}

// TypListinyKodType was auto-generated from WSDL.
type TypListinyKodType uint64

// TypOSKodType was auto-generated from WSDL.
type TypOSKodType string

// TypOSNazevType was auto-generated from WSDL.
type TypOSNazevType string

// TypOperaceKodType was auto-generated from WSDL.
type TypOperaceKodType uint64

// TypOperaceNazevType was auto-generated from WSDL.
type TypOperaceNazevType string

// TypParcelyKodType was auto-generated from WSDL.
type TypParcelyKodType string

// TypParcelyNazevType was auto-generated from WSDL.
type TypParcelyNazevType string

// TypPravnihoVztahuKodType was auto-generated from WSDL.
type TypPravnihoVztahuKodType string

// TypPravnihoVztahuNazevType was auto-generated from WSDL.
type TypPravnihoVztahuNazevType string

// TypRizeniKodType was auto-generated from WSDL.
type TypRizeniKodType string

// TypRizeniNazevType was auto-generated from WSDL.
type TypRizeniNazevType string

// TypSeznamuObjektuType was auto-generated from WSDL.
type TypSeznamuObjektuType string

// Validate validates TypSeznamuObjektuType.
func (v TypSeznamuObjektuType) Validate() bool {
	for _, vv := range []string{
		"PAR_S",
		"STA_S",
		"JED_S",
		"PRA_S",
	} {
		if reflect.DeepEqual(v, vv) {
			return true
		}
	}
	return false
}

// TypStavbyKodType was auto-generated from WSDL.
type TypStavbyKodType uint64

// TypStavbyNazevType was auto-generated from WSDL.
type TypStavbyNazevType string

// TypUcastnikaKodType was auto-generated from WSDL.
type TypUcastnikaKodType string

// TypUdalostiKodType was auto-generated from WSDL.
type TypUdalostiKodType string

// Validate validates TypUdalostiKodType.
func (v TypUdalostiKodType) Validate() bool {
	for _, vv := range []string{
		"U3",
		"U4",
		"U5",
		"U6",
		"U7",
		"U8",
		"U9",
	} {
		if reflect.DeepEqual(v, vv) {
			return true
		}
	}
	return false
}

// TypVlastnikaSestavyType was auto-generated from WSDL.
type TypVlastnikaSestavyType TypVlastnikaType

// Validate validates TypVlastnikaSestavyType.
func (v TypVlastnikaSestavyType) Validate() bool {
	for _, vv := range []TypVlastnikaType{
		OFO,
		OPO,
	} {
		if reflect.DeepEqual(v, vv) {
			return true
		}
	}
	return false
}

// TypVlastnikaType was auto-generated from WSDL.
type TypVlastnikaType string

// Validate validates TypVlastnikaType.
func (v TypVlastnikaType) Validate() bool {
	for _, vv := range []string{
		"OFO",
		"OPO",
		"BSM",
	} {
		if reflect.DeepEqual(v, vv) {
			return true
		}
	}
	return false
}

// UcelKodType was auto-generated from WSDL.
type UcelKodType uint64

// UcelNazevType was auto-generated from WSDL.
type UcelNazevType string

// UcelPravaStavbyKodType was auto-generated from WSDL.
type UcelPravaStavbyKodType uint

// UcelPravaStavbyNazevType was auto-generated from WSDL.
type UcelPravaStavbyNazevType string

// UdalostiIdOdType was auto-generated from WSDL.
type UdalostiIdOdType uint64

// UdalostiMaxPolozekType was auto-generated from WSDL.
type UdalostiMaxPolozekType uint

// UliceKodType was auto-generated from WSDL.
type UliceKodType uint64

// UliceNazevType was auto-generated from WSDL.
type UliceNazevType string

// UrceniVymeryKodType was auto-generated from WSDL.
type UrceniVymeryKodType uint

// UrceniVymeryNazevType was auto-generated from WSDL.
type UrceniVymeryNazevType string

// VlastnictviPodilCitatelType was auto-generated from WSDL.
type VlastnictviPodilCitatelType uint64

// VlastnictviPodilJmenovatelType was auto-generated from WSDL.
type VlastnictviPodilJmenovatelType uint64

// VyuzitiJednotkyKodType was auto-generated from WSDL.
type VyuzitiJednotkyKodType uint64

// VyuzitiJednotkyNazevType was auto-generated from WSDL.
type VyuzitiJednotkyNazevType string

// VyuzitiPozemkuKodType was auto-generated from WSDL.
type VyuzitiPozemkuKodType uint64

// VyuzitiPozemkuNazevType was auto-generated from WSDL.
type VyuzitiPozemkuNazevType string

// VyuzitiStavbyKodType was auto-generated from WSDL.
type VyuzitiStavbyKodType uint64

// VyuzitiStavbyNazevType was auto-generated from WSDL.
type VyuzitiStavbyNazevType string

// ZdrojCislovaniZEKodType was auto-generated from WSDL.
type ZdrojCislovaniZEKodType uint64

// ZdrojCislovaniZENazevType was auto-generated from WSDL.
type ZdrojCislovaniZENazevType string

// ZdrojCislovaniZEZkratkaType was auto-generated from WSDL.
type ZdrojCislovaniZEZkratkaType string

// ZpravaServeruTypeType was auto-generated from WSDL.
type ZpravaServeruTypeType string

// Validate validates ZpravaServeruTypeType.
func (v ZpravaServeruTypeType) Validate() bool {
	for _, vv := range []string{
		"INFORMACE",
		"VAROVANI",
		"CHYBA",
	} {
		if reflect.DeepEqual(v, vv) {
			return true
		}
	}
	return false
}

// ZpravaWSKodType was auto-generated from WSDL.
type ZpravaWSKodType uint

// ZpravaWSNazevType was auto-generated from WSDL.
type ZpravaWSNazevType string

// ZpravaWSTypType was auto-generated from WSDL.
type ZpravaWSTypType string

// ZpusobCislovaniParcelyKodType was auto-generated from WSDL.
type ZpusobCislovaniParcelyKodType uint64

// ZpusobCislovaniParcelyNazevType was auto-generated from WSDL.
type ZpusobCislovaniParcelyNazevType string

// ZpusobOchranyKodType was auto-generated from WSDL.
type ZpusobOchranyKodType uint64

// ZpusobOchranyNazevType was auto-generated from WSDL.
type ZpusobOchranyNazevType string

// ZpusobUhradyType was auto-generated from WSDL.
type ZpusobUhradyType string

// Validate validates ZpusobUhradyType.
func (v ZpusobUhradyType) Validate() bool {
	for _, vv := range []string{
		"F",
		"U",
		"I",
	} {
		if reflect.DeepEqual(v, vv) {
			return true
		}
	}
	return false
}

// ZpusobVyuzitiStavbyType was auto-generated from WSDL.
type ZpusobVyuzitiStavbyType uint64

// UuidType was auto-generated from WSDL.
type UuidType string

// Bankovní spojení
type BankovniSpojeniType struct {
	Predcisli *PredcisliBankUctuType `xml:"predcisli,omitempty" json:"predcisli,omitempty" yaml:"predcisli,omitempty"`
	CisloUctu *CisloBankUctuType     `xml:"cisloUctu,omitempty" json:"cisloUctu,omitempty" yaml:"cisloUctu,omitempty"`
	KodBanky  *KodBankyType          `xml:"kodBanky,omitempty" json:"kodBanky,omitempty" yaml:"kodBanky,omitempty"`
	TypUctu   *TypBankUctuType       `xml:"typUctu,omitempty" json:"typUctu,omitempty" yaml:"typUctu,omitempty"`
}

// Komplexní typ části obce
type CastObceType struct {
	Kod   *CastObceKodType   `xml:"kod,omitempty" json:"kod,omitempty" yaml:"kod,omitempty"`
	Nazev *CastObceNazevType `xml:"nazev,omitempty" json:"nazev,omitempty" yaml:"nazev,omitempty"`
}

// IdJednotkyListType was auto-generated from WSDL.
type IdJednotkyListType struct {
	IdJednotky []*IdType `xml:"idJednotky,omitempty" json:"idJednotky,omitempty" yaml:"idJednotky,omitempty"`
}

// Komplexní typ seznamu identifikátorů parcel
type IdParcelyListType struct {
	IdParcely []*IdType `xml:"idParcely,omitempty" json:"idParcely,omitempty" yaml:"idParcely,omitempty"`
}

// IdPravaStavbyListType was auto-generated from WSDL.
type IdPravaStavbyListType struct {
	IdPravaStavby []*IdType `xml:"idPravaStavby,omitempty" json:"idPravaStavby,omitempty" yaml:"idPravaStavby,omitempty"`
}

// IdStavbyListType was auto-generated from WSDL.
type IdStavbyListType struct {
	IdStavby []*IdType `xml:"idStavby,omitempty" json:"idStavby,omitempty" yaml:"idStavby,omitempty"`
}

// Identifikační údaje jednotky.
type JednotkaIdentType struct {
	IdJednotky *IdType            `xml:"idJednotky,omitempty" json:"idJednotky,omitempty" yaml:"idJednotky,omitempty"`
	LvId       *IdType            `xml:"lvId,omitempty" json:"lvId,omitempty" yaml:"lvId,omitempty"`
	Cislo      *JednotkaCisloType `xml:"cislo,omitempty" json:"cislo,omitempty" yaml:"cislo,omitempty"`
	Stavba     *StavbaIdentType   `xml:"stavba,omitempty" json:"stavba,omitempty" yaml:"stavba,omitempty"`
}

// Obecný typ pro jednotku
type JednotkaType struct {
	IdJednotky *IdType                       `xml:"idJednotky,omitempty" json:"idJednotky,omitempty" yaml:"idJednotky,omitempty"`
	Stavba     *StavbaIdentType              `xml:"stavba,omitempty" json:"stavba,omitempty" yaml:"stavba,omitempty"`
	TypJedKod  *JednotkaTypJednotkyKodType   `xml:"typJedKod,omitempty" json:"typJedKod,omitempty" yaml:"typJedKod,omitempty"`
	Cislo      *JednotkaCisloType            `xml:"cislo,omitempty" json:"cislo,omitempty" yaml:"cislo,omitempty"`
	ZpuVyKod   *JednotkaZpusobVyuzitiKodType `xml:"zpuVyKod,omitempty" json:"zpuVyKod,omitempty" yaml:"zpuVyKod,omitempty"`
	LvId       *IdType                       `xml:"lvId,omitempty" json:"lvId,omitempty" yaml:"lvId,omitempty"`
}

// Rozšíření základních údajů jednotky pro oznamovací
// službu.
type JednotkaZpravaType struct {
	IdJednotky    *IdType                       `xml:"idJednotky,omitempty" json:"idJednotky,omitempty" yaml:"idJednotky,omitempty"`
	Stavba        *StavbaIdentType              `xml:"stavba,omitempty" json:"stavba,omitempty" yaml:"stavba,omitempty"`
	TypJedKod     *JednotkaTypJednotkyKodType   `xml:"typJedKod,omitempty" json:"typJedKod,omitempty" yaml:"typJedKod,omitempty"`
	Cislo         *JednotkaCisloType            `xml:"cislo,omitempty" json:"cislo,omitempty" yaml:"cislo,omitempty"`
	ZpuVyKod      *JednotkaZpusobVyuzitiKodType `xml:"zpuVyKod,omitempty" json:"zpuVyKod,omitempty" yaml:"zpuVyKod,omitempty"`
	LvId          *IdType                       `xml:"lvId,omitempty" json:"lvId,omitempty" yaml:"lvId,omitempty"`
	DatumPlomby   *DateTime                     `xml:"datumPlomby,omitempty" json:"datumPlomby,omitempty" yaml:"datumPlomby,omitempty"`
	TypeAttrXSI   string                        `xml:"xsi:type,attr,omitempty"`
	TypeNamespace string                        `xml:"xmlns:objtype,attr,omitempty"`

	OverrideTypeAttrXSI   *string `xml:"-"`
	OverrideTypeNamespace *string `xml:"-"`
}

// SetXMLType was auto-generated from WSDL.
func (t *JednotkaZpravaType) SetXMLType() {
	if t.OverrideTypeAttrXSI != nil {
		t.TypeAttrXSI = *t.OverrideTypeAttrXSI
	} else {
		t.TypeAttrXSI = "objtype:JednotkaZpravaType"
	}
	if t.OverrideTypeNamespace != nil {
		t.TypeNamespace = *t.OverrideTypeNamespace
	} else {
		t.TypeNamespace = "http://katastr.cuzk.cz/ozsNotifikace/types/v2.6"
	}
}

// Údaje JPV pro oznamovací službu.
type JpvZpravaType struct {
	IdJpv                  *IdType                   `xml:"idJpv,omitempty" json:"idJpv,omitempty" yaml:"idJpv,omitempty"`
	TypJpvKod              *TypPravnihoVztahuKodType `xml:"typJpvKod,omitempty" json:"typJpvKod,omitempty" yaml:"typJpvKod,omitempty"`
	PopisJpv               *TextType                 `xml:"popisJpv,omitempty" json:"popisJpv,omitempty" yaml:"popisJpv,omitempty"`
	DoplnkovyPopisJpv      *DoplnkovyPopisJpvType    `xml:"doplnkovyPopisJpv,omitempty" json:"doplnkovyPopisJpv,omitempty" yaml:"doplnkovyPopisJpv,omitempty"`
	PoradiCas              *DateTime                 `xml:"poradiCas,omitempty" json:"poradiCas,omitempty" yaml:"poradiCas,omitempty"`
	PoradiText             *PoradiTextJpvType        `xml:"poradiText,omitempty" json:"poradiText,omitempty" yaml:"poradiText,omitempty"`
	DatumUkonceni          *Date                     `xml:"datumUkonceni,omitempty" json:"datumUkonceni,omitempty" yaml:"datumUkonceni,omitempty"`
	OsVeVztahuK            *OSType                   `xml:"osVeVztahuK,omitempty" json:"osVeVztahuK,omitempty" yaml:"osVeVztahuK,omitempty"`
	OsVeVztahuPro          *OSType                   `xml:"osVeVztahuPro,omitempty" json:"osVeVztahuPro,omitempty" yaml:"osVeVztahuPro,omitempty"`
	OsVeVztahuNadr         *OSType                   `xml:"osVeVztahuNadr,omitempty" json:"osVeVztahuNadr,omitempty" yaml:"osVeVztahuNadr,omitempty"`
	ParcelaVeVztahuK       *ParcelaIdentType         `xml:"parcelaVeVztahuK,omitempty" json:"parcelaVeVztahuK,omitempty" yaml:"parcelaVeVztahuK,omitempty"`
	ParcelaVeVztahuPro     *ParcelaIdentType         `xml:"parcelaVeVztahuPro,omitempty" json:"parcelaVeVztahuPro,omitempty" yaml:"parcelaVeVztahuPro,omitempty"`
	StavbaVeVztahuK        *StavbaIdentType          `xml:"stavbaVeVztahuK,omitempty" json:"stavbaVeVztahuK,omitempty" yaml:"stavbaVeVztahuK,omitempty"`
	StavbaVeVztahuPro      *StavbaIdentType          `xml:"stavbaVeVztahuPro,omitempty" json:"stavbaVeVztahuPro,omitempty" yaml:"stavbaVeVztahuPro,omitempty"`
	JednotkaVeVztahuK      *JednotkaIdentType        `xml:"jednotkaVeVztahuK,omitempty" json:"jednotkaVeVztahuK,omitempty" yaml:"jednotkaVeVztahuK,omitempty"`
	JednotkaVeVztahuPro    *JednotkaIdentType        `xml:"jednotkaVeVztahuPro,omitempty" json:"jednotkaVeVztahuPro,omitempty" yaml:"jednotkaVeVztahuPro,omitempty"`
	PravoStavbyVeVztahuK   *PravoStavbyIdentType     `xml:"pravoStavbyVeVztahuK,omitempty" json:"pravoStavbyVeVztahuK,omitempty" yaml:"pravoStavbyVeVztahuK,omitempty"`
	PravoStavbyVeVztahuPro *PravoStavbyIdentType     `xml:"pravoStavbyVeVztahuPro,omitempty" json:"pravoStavbyVeVztahuPro,omitempty" yaml:"pravoStavbyVeVztahuPro,omitempty"`
}

// KatastralniUzemiListType was auto-generated from WSDL.
type KatastralniUzemiListType struct {
	Ku []*KatuzeType `xml:"ku,omitempty" json:"ku,omitempty" yaml:"ku,omitempty"`
}

// Komplexní typ list kódů katastrálního uzemí
type KatuzeKodListType struct {
	KatuzeKod []KatastrUzemiKodType `xml:"katuzeKod" json:"katuzeKod" yaml:"katuzeKod"`
}

// Katastrální území
type KatuzeType struct {
	Kod   *KatastrUzemiKodType   `xml:"kod,omitempty" json:"kod,omitempty" yaml:"kod,omitempty"`
	Nazev *KatastrUzemiNazevType `xml:"nazev,omitempty" json:"nazev,omitempty" yaml:"nazev,omitempty"`
}

// Identifikační údaje listiny.
type ListinaType struct {
	ListinaId       *IdType   `xml:"listinaId,omitempty" json:"listinaId,omitempty" yaml:"listinaId,omitempty"`
	OznaceniListiny *string   `xml:"oznaceniListiny,omitempty" json:"oznaceniListiny,omitempty" yaml:"oznaceniListiny,omitempty"`
	DatumVyhotoveni *DateTime `xml:"datumVyhotoveni,omitempty" json:"datumVyhotoveni,omitempty" yaml:"datumVyhotoveni,omitempty"`
}

// Struktura notifikační zprávy OZS odebírané prostřednictvím
// WS.
type NotifikaceType struct {
	Rizeni      *RizeniType      `xml:"rizeni,omitempty" json:"rizeni,omitempty" yaml:"rizeni,omitempty"`
	UdalostList *UdalostListType `xml:"udalostList,omitempty" json:"udalostList,omitempty" yaml:"udalostList,omitempty"`
}

// Základní typ pro oprávněný subjekt - OFO, OPO, 				partneři
//
type OSBaseType struct {
	IdOS              IdType                    `xml:"idOS" json:"idOS" yaml:"idOS"`
	Nazev             *NazevFirmyType           `xml:"nazev,omitempty" json:"nazev,omitempty" yaml:"nazev,omitempty"`
	Ico               *IcoType                  `xml:"ico,omitempty" json:"ico,omitempty" yaml:"ico,omitempty"`
	DoplnekIco        *DoplnekIcoType           `xml:"doplnekIco,omitempty" json:"doplnekIco,omitempty" yaml:"doplnekIco,omitempty"`
	Prijmeni          *PrijmeniType             `xml:"prijmeni,omitempty" json:"prijmeni,omitempty" yaml:"prijmeni,omitempty"`
	Jmeno             *JmenoType                `xml:"jmeno,omitempty" json:"jmeno,omitempty" yaml:"jmeno,omitempty"`
	TitulPred         *TitulPredJmenemType      `xml:"titulPred,omitempty" json:"titulPred,omitempty" yaml:"titulPred,omitempty"`
	TitulZa           *TitulZaJmenemType        `xml:"titulZa,omitempty" json:"titulZa,omitempty" yaml:"titulZa,omitempty"`
	RcZkracene        *RcType                   `xml:"rcZkracene,omitempty" json:"rcZkracene,omitempty" yaml:"rcZkracene,omitempty"`
	Ulice             *UliceNazevType           `xml:"ulice,omitempty" json:"ulice,omitempty" yaml:"ulice,omitempty"`
	CisloDomovni      *CisloDomovniType         `xml:"cisloDomovni,omitempty" json:"cisloDomovni,omitempty" yaml:"cisloDomovni,omitempty"`
	CisloOrientacni   *CisloOrientacniType      `xml:"cisloOrientacni,omitempty" json:"cisloOrientacni,omitempty" yaml:"cisloOrientacni,omitempty"`
	CastObceNazev     *CastObceNazevType        `xml:"castObceNazev,omitempty" json:"castObceNazev,omitempty" yaml:"castObceNazev,omitempty"`
	ObecNazev         *ObecNazevType            `xml:"obecNazev,omitempty" json:"obecNazev,omitempty" yaml:"obecNazev,omitempty"`
	MestskaCastNazev  *MestskaCastNazevType     `xml:"mestskaCastNazev,omitempty" json:"mestskaCastNazev,omitempty" yaml:"mestskaCastNazev,omitempty"`
	MestskyObvodNazev *MestskyObvodNazevType    `xml:"mestskyObvodNazev,omitempty" json:"mestskyObvodNazev,omitempty" yaml:"mestskyObvodNazev,omitempty"`
	Psc               *PSCType                  `xml:"psc,omitempty" json:"psc,omitempty" yaml:"psc,omitempty"`
	VlastnikTyp       *TypVlastnikaType         `xml:"vlastnikTyp,omitempty" json:"vlastnikTyp,omitempty" yaml:"vlastnikTyp,omitempty"`
	TypCpCe           *CpCeType                 `xml:"typCpCe,omitempty" json:"typCpCe,omitempty" yaml:"typCpCe,omitempty"`
	StatNazev         *StatNazevType            `xml:"statNazev,omitempty" json:"statNazev,omitempty" yaml:"statNazev,omitempty"`
	OkresNazev        *OkresNazevType           `xml:"okresNazev,omitempty" json:"okresNazev,omitempty" yaml:"okresNazev,omitempty"`
	CharOSType        *CharakteristikaOSKodType `xml:"charOSType,omitempty" json:"charOSType,omitempty" yaml:"charOSType,omitempty"`
}

// Rozšířený typ pro oprávněný subjekt s uvedenim OS - 				partnerů
//
type OSType struct {
	IdOS              IdType                    `xml:"idOS" json:"idOS" yaml:"idOS"`
	Nazev             *NazevFirmyType           `xml:"nazev,omitempty" json:"nazev,omitempty" yaml:"nazev,omitempty"`
	Ico               *IcoType                  `xml:"ico,omitempty" json:"ico,omitempty" yaml:"ico,omitempty"`
	DoplnekIco        *DoplnekIcoType           `xml:"doplnekIco,omitempty" json:"doplnekIco,omitempty" yaml:"doplnekIco,omitempty"`
	Prijmeni          *PrijmeniType             `xml:"prijmeni,omitempty" json:"prijmeni,omitempty" yaml:"prijmeni,omitempty"`
	Jmeno             *JmenoType                `xml:"jmeno,omitempty" json:"jmeno,omitempty" yaml:"jmeno,omitempty"`
	TitulPred         *TitulPredJmenemType      `xml:"titulPred,omitempty" json:"titulPred,omitempty" yaml:"titulPred,omitempty"`
	TitulZa           *TitulZaJmenemType        `xml:"titulZa,omitempty" json:"titulZa,omitempty" yaml:"titulZa,omitempty"`
	RcZkracene        *RcType                   `xml:"rcZkracene,omitempty" json:"rcZkracene,omitempty" yaml:"rcZkracene,omitempty"`
	Ulice             *UliceNazevType           `xml:"ulice,omitempty" json:"ulice,omitempty" yaml:"ulice,omitempty"`
	CisloDomovni      *CisloDomovniType         `xml:"cisloDomovni,omitempty" json:"cisloDomovni,omitempty" yaml:"cisloDomovni,omitempty"`
	CisloOrientacni   *CisloOrientacniType      `xml:"cisloOrientacni,omitempty" json:"cisloOrientacni,omitempty" yaml:"cisloOrientacni,omitempty"`
	CastObceNazev     *CastObceNazevType        `xml:"castObceNazev,omitempty" json:"castObceNazev,omitempty" yaml:"castObceNazev,omitempty"`
	ObecNazev         *ObecNazevType            `xml:"obecNazev,omitempty" json:"obecNazev,omitempty" yaml:"obecNazev,omitempty"`
	MestskaCastNazev  *MestskaCastNazevType     `xml:"mestskaCastNazev,omitempty" json:"mestskaCastNazev,omitempty" yaml:"mestskaCastNazev,omitempty"`
	MestskyObvodNazev *MestskyObvodNazevType    `xml:"mestskyObvodNazev,omitempty" json:"mestskyObvodNazev,omitempty" yaml:"mestskyObvodNazev,omitempty"`
	Psc               *PSCType                  `xml:"psc,omitempty" json:"psc,omitempty" yaml:"psc,omitempty"`
	VlastnikTyp       *TypVlastnikaType         `xml:"vlastnikTyp,omitempty" json:"vlastnikTyp,omitempty" yaml:"vlastnikTyp,omitempty"`
	TypCpCe           *CpCeType                 `xml:"typCpCe,omitempty" json:"typCpCe,omitempty" yaml:"typCpCe,omitempty"`
	StatNazev         *StatNazevType            `xml:"statNazev,omitempty" json:"statNazev,omitempty" yaml:"statNazev,omitempty"`
	OkresNazev        *OkresNazevType           `xml:"okresNazev,omitempty" json:"okresNazev,omitempty" yaml:"okresNazev,omitempty"`
	CharOSType        *CharakteristikaOSKodType `xml:"charOSType,omitempty" json:"charOSType,omitempty" yaml:"charOSType,omitempty"`
	Partner1          *PartnerType              `xml:"partner1,omitempty" json:"partner1,omitempty" yaml:"partner1,omitempty"`
	Partner2          *PartnerType              `xml:"partner2,omitempty" json:"partner2,omitempty" yaml:"partner2,omitempty"`
	TypeAttrXSI       string                    `xml:"xsi:type,attr,omitempty"`
	TypeNamespace     string                    `xml:"xmlns:objtype,attr,omitempty"`

	OverrideTypeAttrXSI   *string `xml:"-"`
	OverrideTypeNamespace *string `xml:"-"`
}

// SetXMLType was auto-generated from WSDL.
func (t *OSType) SetXMLType() {
	if t.OverrideTypeAttrXSI != nil {
		t.TypeAttrXSI = *t.OverrideTypeAttrXSI
	} else {
		t.TypeAttrXSI = "objtype:OSType"
	}
	if t.OverrideTypeNamespace != nil {
		t.TypeNamespace = *t.OverrideTypeNamespace
	} else {
		t.TypeNamespace = "http://katastr.cuzk.cz/commonTypes/v2.6"
	}
}

// Údaje operace řízení pro oznamovací službu.
type OperaceRizeniZpravaType struct {
	KodFunkce            *OperaceRizeniKodType   `xml:"kodFunkce,omitempty" json:"kodFunkce,omitempty" yaml:"kodFunkce,omitempty"`
	KodOperace           *OperaceRizeniKodType   `xml:"kodOperace,omitempty" json:"kodOperace,omitempty" yaml:"kodOperace,omitempty"`
	NazevOperace         *OperaceRizeniNazevType `xml:"nazevOperace,omitempty" json:"nazevOperace,omitempty" yaml:"nazevOperace,omitempty"`
	DatumUkonceniOperace *DateTime               `xml:"datumUkonceniOperace,omitempty" json:"datumUkonceniOperace,omitempty" yaml:"datumUkonceniOperace,omitempty"`
}

// Identifikační údaje percely
type ParcelaIdentType struct {
	IdParcely        IdType                  `xml:"idParcely" json:"idParcely" yaml:"idParcely"`
	LvId             *IdType                 `xml:"lvId,omitempty" json:"lvId,omitempty" yaml:"lvId,omitempty"`
	KatuzeKod        KatastrUzemiKodType     `xml:"katuzeKod" json:"katuzeKod" yaml:"katuzeKod"`
	KmenoveCislo     ParcelaKmenoveCisloType `xml:"kmenoveCislo" json:"kmenoveCislo" yaml:"kmenoveCislo"`
	ParcelaType      ParcelaTypeType         `xml:"parcelaType" json:"parcelaType" yaml:"parcelaType"`
	DruhCislovaniPar DruhCislovaniParType    `xml:"druhCislovaniPar" json:"druhCislovaniPar" yaml:"druhCislovaniPar"`
	PoddeleniCisla   *ParcelaPoddeleniType   `xml:"poddeleniCisla,omitempty" json:"poddeleniCisla,omitempty" yaml:"poddeleniCisla,omitempty"`
	KatuzePuv        *KatastrUzemiKodType    `xml:"katuzePuv,omitempty" json:"katuzePuv,omitempty" yaml:"katuzePuv,omitempty"`
	TypZE            *ParcelaTypZEType       `xml:"typZE,omitempty" json:"typZE,omitempty" yaml:"typZE,omitempty"`
	Dil              *ParcelaDilType         `xml:"dil,omitempty" json:"dil,omitempty" yaml:"dil,omitempty"`
}

// Komplexní typ parcely
type ParcelaType struct {
	IdParcely             *IdType                           `xml:"idParcely,omitempty" json:"idParcely,omitempty" yaml:"idParcely,omitempty"`
	ParcelaType           *ParcelaTypeType                  `xml:"parcelaType,omitempty" json:"parcelaType,omitempty" yaml:"parcelaType,omitempty"`
	KatuzeKod             *KatastrUzemiKodType              `xml:"katuzeKod,omitempty" json:"katuzeKod,omitempty" yaml:"katuzeKod,omitempty"`
	KatuzePuv             *KatastrUzemiKodType              `xml:"katuzePuv,omitempty" json:"katuzePuv,omitempty" yaml:"katuzePuv,omitempty"`
	KmenoveCislo          *ParcelaKmenoveCisloType          `xml:"kmenoveCislo,omitempty" json:"kmenoveCislo,omitempty" yaml:"kmenoveCislo,omitempty"`
	PoddeleniCisla        *ParcelaPoddeleniType             `xml:"poddeleniCisla,omitempty" json:"poddeleniCisla,omitempty" yaml:"poddeleniCisla,omitempty"`
	Dil                   *ParcelaDilType                   `xml:"dil,omitempty" json:"dil,omitempty" yaml:"dil,omitempty"`
	ZpUrVyKod             *ParcelaZpusobUrceniVymeryKodType `xml:"zpUrVyKod,omitempty" json:"zpUrVyKod,omitempty" yaml:"zpUrVyKod,omitempty"`
	TypZE                 *ParcelaTypZEType                 `xml:"typZE,omitempty" json:"typZE,omitempty" yaml:"typZE,omitempty"`
	DrupozKod             *ParcelaDruhPozemkuKodType        `xml:"drupozKod,omitempty" json:"drupozKod,omitempty" yaml:"drupozKod,omitempty"`
	ZpuvypaKod            *ParcelaZpusobVyuzitiKodType      `xml:"zpuvypaKod,omitempty" json:"zpuvypaKod,omitempty" yaml:"zpuvypaKod,omitempty"`
	Typ                   *ParcelaTypType                   `xml:"typ,omitempty" json:"typ,omitempty" yaml:"typ,omitempty"`
	Vymera                *ParcelaVymeraType                `xml:"vymera,omitempty" json:"vymera,omitempty" yaml:"vymera,omitempty"`
	LvId                  *IdType                           `xml:"lvId,omitempty" json:"lvId,omitempty" yaml:"lvId,omitempty"`
	DruhCislovaniPar      *DruhCislovaniParType             `xml:"druhCislovaniPar,omitempty" json:"druhCislovaniPar,omitempty" yaml:"druhCislovaniPar,omitempty"`
	Stavba                *StavbaIdentType                  `xml:"stavba,omitempty" json:"stavba,omitempty" yaml:"stavba,omitempty"`
	StavbaSoucastiParcely *AnoNeType                        `xml:"stavbaSoucastiParcely,omitempty" json:"stavbaSoucastiParcely,omitempty" yaml:"stavbaSoucastiParcely,omitempty"`
	PravoStavby           *PravoStavbyIdentType             `xml:"pravoStavby,omitempty" json:"pravoStavby,omitempty" yaml:"pravoStavby,omitempty"`
}

// Rozšíření základních údajů parcely pro oznamovací službu.
type ParcelaZpravaType struct {
	IdParcely             *IdType                           `xml:"idParcely,omitempty" json:"idParcely,omitempty" yaml:"idParcely,omitempty"`
	ParcelaType           *ParcelaTypeType                  `xml:"parcelaType,omitempty" json:"parcelaType,omitempty" yaml:"parcelaType,omitempty"`
	KatuzeKod             *KatastrUzemiKodType              `xml:"katuzeKod,omitempty" json:"katuzeKod,omitempty" yaml:"katuzeKod,omitempty"`
	KatuzePuv             *KatastrUzemiKodType              `xml:"katuzePuv,omitempty" json:"katuzePuv,omitempty" yaml:"katuzePuv,omitempty"`
	KmenoveCislo          *ParcelaKmenoveCisloType          `xml:"kmenoveCislo,omitempty" json:"kmenoveCislo,omitempty" yaml:"kmenoveCislo,omitempty"`
	PoddeleniCisla        *ParcelaPoddeleniType             `xml:"poddeleniCisla,omitempty" json:"poddeleniCisla,omitempty" yaml:"poddeleniCisla,omitempty"`
	Dil                   *ParcelaDilType                   `xml:"dil,omitempty" json:"dil,omitempty" yaml:"dil,omitempty"`
	ZpUrVyKod             *ParcelaZpusobUrceniVymeryKodType `xml:"zpUrVyKod,omitempty" json:"zpUrVyKod,omitempty" yaml:"zpUrVyKod,omitempty"`
	TypZE                 *ParcelaTypZEType                 `xml:"typZE,omitempty" json:"typZE,omitempty" yaml:"typZE,omitempty"`
	DrupozKod             *ParcelaDruhPozemkuKodType        `xml:"drupozKod,omitempty" json:"drupozKod,omitempty" yaml:"drupozKod,omitempty"`
	ZpuvypaKod            *ParcelaZpusobVyuzitiKodType      `xml:"zpuvypaKod,omitempty" json:"zpuvypaKod,omitempty" yaml:"zpuvypaKod,omitempty"`
	Typ                   *ParcelaTypType                   `xml:"typ,omitempty" json:"typ,omitempty" yaml:"typ,omitempty"`
	Vymera                *ParcelaVymeraType                `xml:"vymera,omitempty" json:"vymera,omitempty" yaml:"vymera,omitempty"`
	LvId                  *IdType                           `xml:"lvId,omitempty" json:"lvId,omitempty" yaml:"lvId,omitempty"`
	DruhCislovaniPar      *DruhCislovaniParType             `xml:"druhCislovaniPar,omitempty" json:"druhCislovaniPar,omitempty" yaml:"druhCislovaniPar,omitempty"`
	Stavba                *StavbaIdentType                  `xml:"stavba,omitempty" json:"stavba,omitempty" yaml:"stavba,omitempty"`
	StavbaSoucastiParcely *AnoNeType                        `xml:"stavbaSoucastiParcely,omitempty" json:"stavbaSoucastiParcely,omitempty" yaml:"stavbaSoucastiParcely,omitempty"`
	PravoStavby           *PravoStavbyIdentType             `xml:"pravoStavby,omitempty" json:"pravoStavby,omitempty" yaml:"pravoStavby,omitempty"`
	DatumPlomby           *DateTime                         `xml:"datumPlomby,omitempty" json:"datumPlomby,omitempty" yaml:"datumPlomby,omitempty"`
	TypeAttrXSI           string                            `xml:"xsi:type,attr,omitempty"`
	TypeNamespace         string                            `xml:"xmlns:objtype,attr,omitempty"`

	OverrideTypeAttrXSI   *string `xml:"-"`
	OverrideTypeNamespace *string `xml:"-"`
}

// SetXMLType was auto-generated from WSDL.
func (t *ParcelaZpravaType) SetXMLType() {
	if t.OverrideTypeAttrXSI != nil {
		t.TypeAttrXSI = *t.OverrideTypeAttrXSI
	} else {
		t.TypeAttrXSI = "objtype:ParcelaZpravaType"
	}
	if t.OverrideTypeNamespace != nil {
		t.TypeNamespace = *t.OverrideTypeNamespace
	} else {
		t.TypeNamespace = "http://katastr.cuzk.cz/ozsNotifikace/types/v2.6"
	}
}

// ParcelyList was auto-generated from WSDL.
type ParcelyList struct {
	Parcela []*ParcelaIdentType `xml:"parcela,omitempty" json:"parcela,omitempty" yaml:"parcela,omitempty"`
}

// Typ pro element s OS - partner
type PartnerType struct {
	OS *OSBaseType `xml:"OS,omitempty" json:"OS,omitempty" yaml:"OS,omitempty"`
}

// Identifikační údaje práva stavby.
type PravoStavbyIdentType struct {
	IdPravoStavby        IdType            `xml:"idPravoStavby" json:"idPravoStavby" yaml:"idPravoStavby"`
	LvId                 *IdType           `xml:"lvId,omitempty" json:"lvId,omitempty" yaml:"lvId,omitempty"`
	ParcelaIdentifikacni *ParcelaIdentType `xml:"parcelaIdentifikacni,omitempty" json:"parcelaIdentifikacni,omitempty" yaml:"parcelaIdentifikacni,omitempty"`
}

// Komplexní typ pro právo stavby
type PravoStavbyType struct {
	IdPravoStavby       *IdType                  `xml:"idPravoStavby,omitempty" json:"idPravoStavby,omitempty" yaml:"idPravoStavby,omitempty"`
	DatumKoncePlatnosti *Date                    `xml:"datumKoncePlatnosti,omitempty" json:"datumKoncePlatnosti,omitempty" yaml:"datumKoncePlatnosti,omitempty"`
	LvId                *IdType                  `xml:"lvId,omitempty" json:"lvId,omitempty" yaml:"lvId,omitempty"`
	UcelPravaStavbyList *UcelPravaStavbyListType `xml:"ucelPravaStavbyList,omitempty" json:"ucelPravaStavbyList,omitempty" yaml:"ucelPravaStavbyList,omitempty"`
	PouzeIdentParcela   *AnoNeType               `xml:"pouzeIdentParcela,omitempty" json:"pouzeIdentParcela,omitempty" yaml:"pouzeIdentParcela,omitempty"`
	Parcely             *ParcelyList             `xml:"parcely" json:"parcely" yaml:"parcely"`
}

// Rozšíření základních údajů práva stavby pro oznamovací
// službu.
type PravoStavbyZpravaType struct {
	IdPravoStavby       *IdType                  `xml:"idPravoStavby,omitempty" json:"idPravoStavby,omitempty" yaml:"idPravoStavby,omitempty"`
	DatumKoncePlatnosti *Date                    `xml:"datumKoncePlatnosti,omitempty" json:"datumKoncePlatnosti,omitempty" yaml:"datumKoncePlatnosti,omitempty"`
	LvId                *IdType                  `xml:"lvId,omitempty" json:"lvId,omitempty" yaml:"lvId,omitempty"`
	UcelPravaStavbyList *UcelPravaStavbyListType `xml:"ucelPravaStavbyList,omitempty" json:"ucelPravaStavbyList,omitempty" yaml:"ucelPravaStavbyList,omitempty"`
	PouzeIdentParcela   *AnoNeType               `xml:"pouzeIdentParcela,omitempty" json:"pouzeIdentParcela,omitempty" yaml:"pouzeIdentParcela,omitempty"`
	Parcely             *ParcelyList             `xml:"parcely" json:"parcely" yaml:"parcely"`
	DatumPlomby         *DateTime                `xml:"datumPlomby,omitempty" json:"datumPlomby,omitempty" yaml:"datumPlomby,omitempty"`
	TypeAttrXSI         string                   `xml:"xsi:type,attr,omitempty"`
	TypeNamespace       string                   `xml:"xmlns:objtype,attr,omitempty"`

	OverrideTypeAttrXSI   *string `xml:"-"`
	OverrideTypeNamespace *string `xml:"-"`
}

// SetXMLType was auto-generated from WSDL.
func (t *PravoStavbyZpravaType) SetXMLType() {
	if t.OverrideTypeAttrXSI != nil {
		t.TypeAttrXSI = *t.OverrideTypeAttrXSI
	} else {
		t.TypeAttrXSI = "objtype:PravoStavbyZpravaType"
	}
	if t.OverrideTypeNamespace != nil {
		t.TypeNamespace = *t.OverrideTypeNamespace
	} else {
		t.TypeNamespace = "http://katastr.cuzk.cz/ozsNotifikace/types/v2.6"
	}
}

// PredmetRizeniListType was auto-generated from WSDL.
type PredmetRizeniListType struct {
	PredmetRizeni []*PredmetRizeniType `xml:"predmetRizeni,omitempty" json:"predmetRizeni,omitempty" yaml:"predmetRizeni,omitempty"`
}

// PredmetRizeniType was auto-generated from WSDL.
type PredmetRizeniType struct {
	PredmetRizeniKod   *PredmetRizeniKodType   `xml:"predmetRizeniKod,omitempty" json:"predmetRizeniKod,omitempty" yaml:"predmetRizeniKod,omitempty"`
	PredmetRizeniNazev *PredmetRizeniNazevType `xml:"predmetRizeniNazev,omitempty" json:"predmetRizeniNazev,omitempty" yaml:"predmetRizeniNazev,omitempty"`
}

// Příloha webové služby SOAP
type PrilohaWSType struct {
	IdPrilohy    IdPrilohyWSType  `xml:"idPrilohy,attr,omitempty" json:"idPrilohy,attr,omitempty" yaml:"idPrilohy,attr,omitempty"`
	JmenoSouboru NazevSouboruType `xml:"jmenoSouboru,attr,omitempty" json:"jmenoSouboru,attr,omitempty" yaml:"jmenoSouboru,attr,omitempty"`
}

// Standardní hlavička odpovědi
type ResponseInfoType struct {
	Zprava []*ZpravaServeruType `xml:"zprava" json:"zprava" yaml:"zprava"`
}

// Komplexní typ řízení
type RizeniPomocneType struct {
	IdRizeni      *IdType                  `xml:"idRizeni,omitempty" json:"idRizeni,omitempty" yaml:"idRizeni,omitempty"`
	CisloPodani   *RizeniCisloPodaniType   `xml:"cisloPodani,omitempty" json:"cisloPodani,omitempty" yaml:"cisloPodani,omitempty"`
	CreateDate    *RizeniCreateDateType    `xml:"createDate,omitempty" json:"createDate,omitempty" yaml:"createDate,omitempty"`
	PraresKod     *RizeniPraresKodType     `xml:"praresKod,omitempty" json:"praresKod,omitempty" yaml:"praresKod,omitempty"`
	RizeniTyp     *TypRizeniKodType        `xml:"rizeniTyp,omitempty" json:"rizeniTyp,omitempty" yaml:"rizeniTyp,omitempty"`
	PoradoveCislo *RizeniPoradoveCisloType `xml:"poradoveCislo,omitempty" json:"poradoveCislo,omitempty" yaml:"poradoveCislo,omitempty"`
	Rok           *RizeniRokType           `xml:"rok,omitempty" json:"rok,omitempty" yaml:"rok,omitempty"`
	NoveRizeniId  *IdType                  `xml:"noveRizeniId,omitempty" json:"noveRizeniId,omitempty" yaml:"noveRizeniId,omitempty"`
}

// Komplexní typ pro řízení v evidenci KN
type RizeniType struct {
	IdRizeni        *IdType                    `xml:"idRizeni,omitempty" json:"idRizeni,omitempty" yaml:"idRizeni,omitempty"`
	PraresKod       *RizeniPraresKodType       `xml:"praresKod,omitempty" json:"praresKod,omitempty" yaml:"praresKod,omitempty"`
	RizeniTyp       *TypRizeniKodType          `xml:"rizeniTyp,omitempty" json:"rizeniTyp,omitempty" yaml:"rizeniTyp,omitempty"`
	PoradoveCislo   *RizeniPoradoveCisloType   `xml:"poradoveCislo,omitempty" json:"poradoveCislo,omitempty" yaml:"poradoveCislo,omitempty"`
	Rok             *RizeniRokType             `xml:"rok,omitempty" json:"rok,omitempty" yaml:"rok,omitempty"`
	ExtIdentifikace *ExtIdentifikaceRizeniType `xml:"extIdentifikace,omitempty" json:"extIdentifikace,omitempty" yaml:"extIdentifikace,omitempty"`
}

// Identifikační údaje stavby.
type StavbaIdentType struct {
	IdStavby     *IdType           `xml:"idStavby,omitempty" json:"idStavby,omitempty" yaml:"idStavby,omitempty"`
	LvId         *IdType           `xml:"lvId,omitempty" json:"lvId,omitempty" yaml:"lvId,omitempty"`
	TypStavbyKod *TypStavbyKodType `xml:"typStavbyKod,omitempty" json:"typStavbyKod,omitempty" yaml:"typStavbyKod,omitempty"`
}

// Komplexní typ pro stavbu
type StavbaType struct {
	IdStavby             *IdType                  `xml:"idStavby,omitempty" json:"idStavby,omitempty" yaml:"idStavby,omitempty"`
	StavbaTypKod         *TypStavbyKodType        `xml:"stavbaTypKod,omitempty" json:"stavbaTypKod,omitempty" yaml:"stavbaTypKod,omitempty"`
	CastObce             *CastObceType            `xml:"castObce,omitempty" json:"castObce,omitempty" yaml:"castObce,omitempty"`
	CisloDomovni         *CisloDomovniType        `xml:"cisloDomovni,omitempty" json:"cisloDomovni,omitempty" yaml:"cisloDomovni,omitempty"`
	ZpuVyKod             *ZpusobVyuzitiStavbyType `xml:"zpuVyKod,omitempty" json:"zpuVyKod,omitempty" yaml:"zpuVyKod,omitempty"`
	ParcelaIdentifikacni *ParcelaIdentType        `xml:"parcelaIdentifikacni,omitempty" json:"parcelaIdentifikacni,omitempty" yaml:"parcelaIdentifikacni,omitempty"`
	LvId                 *IdType                  `xml:"lvId,omitempty" json:"lvId,omitempty" yaml:"lvId,omitempty"`
	JeSoucasti           *StavbaSoucastiType      `xml:"jeSoucasti,omitempty" json:"jeSoucasti,omitempty" yaml:"jeSoucasti,omitempty"`
	PravoStavby          *PravoStavbyIdentType    `xml:"pravoStavby,omitempty" json:"pravoStavby,omitempty" yaml:"pravoStavby,omitempty"`
	DocasnaStavba        *AnoNeType               `xml:"docasnaStavba,omitempty" json:"docasnaStavba,omitempty" yaml:"docasnaStavba,omitempty"`
}

// TypUdalostiType was auto-generated from WSDL.
type TypUdalostiType struct {
	KodUdalosti       *TypUdalostiKodType `xml:"kodUdalosti,omitempty" json:"kodUdalosti,omitempty" yaml:"kodUdalosti,omitempty"`
	NazevTypuUdalosti *string             `xml:"nazevTypuUdalosti,omitempty" json:"nazevTypuUdalosti,omitempty" yaml:"nazevTypuUdalosti,omitempty"`
}

// Komplexní typ seznamu účelů práv stavby
type UcelPravaStavbyListType struct {
	UcelPravaStavby []*UcelPravaStavbyType `xml:"ucelPravaStavby" json:"ucelPravaStavby" yaml:"ucelPravaStavby"`
}

// Komplexní typ pro účel práva stavby
type UcelPravaStavbyType struct {
	Kod   *UcelPravaStavbyKodType   `xml:"kod,omitempty" json:"kod,omitempty" yaml:"kod,omitempty"`
	Nazev *UcelPravaStavbyNazevType `xml:"nazev,omitempty" json:"nazev,omitempty" yaml:"nazev,omitempty"`
}

// UdalostListType was auto-generated from WSDL.
type UdalostListType struct {
	Udalost []*UdalostType `xml:"udalost" json:"udalost" yaml:"udalost"`
}

// UdalostType was auto-generated from WSDL.
type UdalostType struct {
	TypUdalosti   *TypUdalostiType `xml:"typUdalosti,omitempty" json:"typUdalosti,omitempty" yaml:"typUdalosti,omitempty"`
	Zmena         []*ZmenaType     `xml:"zmena,omitempty" json:"zmena,omitempty" yaml:"zmena,omitempty"`
	DatumUdalosti DateTime         `xml:"datumUdalosti,attr,omitempty" json:"datumUdalosti,attr,omitempty" yaml:"datumUdalosti,attr,omitempty"`
}

// Komplexní typ vlastnictví
type VlastnictviType struct {
	IdVlastnictvi        *IdType                         `xml:"idVlastnictvi,omitempty" json:"idVlastnictvi,omitempty" yaml:"idVlastnictvi,omitempty"`
	LvId                 *IdType                         `xml:"lvId,omitempty" json:"lvId,omitempty" yaml:"lvId,omitempty"`
	PodilCitatel         *VlastnictviPodilCitatelType    `xml:"podilCitatel,omitempty" json:"podilCitatel,omitempty" yaml:"podilCitatel,omitempty"`
	PodilJmenovatel      *VlastnictviPodilJmenovatelType `xml:"podilJmenovatel,omitempty" json:"podilJmenovatel,omitempty" yaml:"podilJmenovatel,omitempty"`
	TypPravnihoVztahuKod *TypPravnihoVztahuKodType       `xml:"typPravnihoVztahuKod,omitempty" json:"typPravnihoVztahuKod,omitempty" yaml:"typPravnihoVztahuKod,omitempty"`
	KatuzeKod            *KatastrUzemiKodType            `xml:"katuzeKod,omitempty" json:"katuzeKod,omitempty" yaml:"katuzeKod,omitempty"`
	LvCislo              *LVCisloType                    `xml:"lvCislo,omitempty" json:"lvCislo,omitempty" yaml:"lvCislo,omitempty"`
	OsId                 *IdType                         `xml:"osId,omitempty" json:"osId,omitempty" yaml:"osId,omitempty"`
	ParcelaId            *IdType                         `xml:"parcelaId,omitempty" json:"parcelaId,omitempty" yaml:"parcelaId,omitempty"`
	BudovaId             *IdType                         `xml:"budovaId,omitempty" json:"budovaId,omitempty" yaml:"budovaId,omitempty"`
	JednotkaId           *IdType                         `xml:"jednotkaId,omitempty" json:"jednotkaId,omitempty" yaml:"jednotkaId,omitempty"`
	PravoStavbyId        *IdType                         `xml:"pravoStavbyId,omitempty" json:"pravoStavbyId,omitempty" yaml:"pravoStavbyId,omitempty"`
}

// Rozšíření základních údajů vlastnictví pro oznamovací
// službu.
type VlastnictviZpravaType struct {
	IdVlastnictvi        *IdType                         `xml:"idVlastnictvi,omitempty" json:"idVlastnictvi,omitempty" yaml:"idVlastnictvi,omitempty"`
	LvId                 *IdType                         `xml:"lvId,omitempty" json:"lvId,omitempty" yaml:"lvId,omitempty"`
	PodilCitatel         *VlastnictviPodilCitatelType    `xml:"podilCitatel,omitempty" json:"podilCitatel,omitempty" yaml:"podilCitatel,omitempty"`
	PodilJmenovatel      *VlastnictviPodilJmenovatelType `xml:"podilJmenovatel,omitempty" json:"podilJmenovatel,omitempty" yaml:"podilJmenovatel,omitempty"`
	TypPravnihoVztahuKod *TypPravnihoVztahuKodType       `xml:"typPravnihoVztahuKod,omitempty" json:"typPravnihoVztahuKod,omitempty" yaml:"typPravnihoVztahuKod,omitempty"`
	KatuzeKod            *KatastrUzemiKodType            `xml:"katuzeKod,omitempty" json:"katuzeKod,omitempty" yaml:"katuzeKod,omitempty"`
	LvCislo              *LVCisloType                    `xml:"lvCislo,omitempty" json:"lvCislo,omitempty" yaml:"lvCislo,omitempty"`
	OsId                 *IdType                         `xml:"osId,omitempty" json:"osId,omitempty" yaml:"osId,omitempty"`
	ParcelaId            *IdType                         `xml:"parcelaId,omitempty" json:"parcelaId,omitempty" yaml:"parcelaId,omitempty"`
	BudovaId             *IdType                         `xml:"budovaId,omitempty" json:"budovaId,omitempty" yaml:"budovaId,omitempty"`
	JednotkaId           *IdType                         `xml:"jednotkaId,omitempty" json:"jednotkaId,omitempty" yaml:"jednotkaId,omitempty"`
	PravoStavbyId        *IdType                         `xml:"pravoStavbyId,omitempty" json:"pravoStavbyId,omitempty" yaml:"pravoStavbyId,omitempty"`
	Os                   *OSType                         `xml:"os,omitempty" json:"os,omitempty" yaml:"os,omitempty"`
	Parcela              *ParcelaIdentType               `xml:"parcela,omitempty" json:"parcela,omitempty" yaml:"parcela,omitempty"`
	Stavba               *StavbaIdentType                `xml:"stavba,omitempty" json:"stavba,omitempty" yaml:"stavba,omitempty"`
	Jednotka             *JednotkaIdentType              `xml:"jednotka,omitempty" json:"jednotka,omitempty" yaml:"jednotka,omitempty"`
	PravoStavby          *PravoStavbyIdentType           `xml:"pravoStavby,omitempty" json:"pravoStavby,omitempty" yaml:"pravoStavby,omitempty"`
	TypeAttrXSI          string                          `xml:"xsi:type,attr,omitempty"`
	TypeNamespace        string                          `xml:"xmlns:objtype,attr,omitempty"`

	OverrideTypeAttrXSI   *string `xml:"-"`
	OverrideTypeNamespace *string `xml:"-"`
}

// SetXMLType was auto-generated from WSDL.
func (t *VlastnictviZpravaType) SetXMLType() {
	if t.OverrideTypeAttrXSI != nil {
		t.TypeAttrXSI = *t.OverrideTypeAttrXSI
	} else {
		t.TypeAttrXSI = "objtype:VlastnictviZpravaType"
	}
	if t.OverrideTypeNamespace != nil {
		t.TypeNamespace = *t.OverrideTypeNamespace
	} else {
		t.TypeNamespace = "http://katastr.cuzk.cz/ozsNotifikace/types/v2.6"
	}
}

// VratNeodebraneZpravyRequestType was auto-generated from WSDL.
type VratNeodebraneZpravyRequestType struct {
	MaxPocet *UdalostiMaxPolozekType `xml:"maxPocet,omitempty" json:"maxPocet,omitempty" yaml:"maxPocet,omitempty"`
	Opakuj   *AnoNeType              `xml:"opakuj,omitempty" json:"opakuj,omitempty" yaml:"opakuj,omitempty"`
}

// VratOdebraneZpravyRequestType was auto-generated from WSDL.
type VratOdebraneZpravyRequestType struct {
	MaxPocet *UdalostiMaxPolozekType `xml:"maxPocet,omitempty" json:"maxPocet,omitempty" yaml:"maxPocet,omitempty"`
	IdOd     *IdType                 `xml:"idOd,omitempty" json:"idOd,omitempty" yaml:"idOd,omitempty"`
	DatumOd  *DateTime               `xml:"datumOd,omitempty" json:"datumOd,omitempty" yaml:"datumOd,omitempty"`
}

// VratZpravyResponseType was auto-generated from WSDL.
type VratZpravyResponseType struct {
	Vysledek *ResponseInfoType `xml:"vysledek,omitempty" json:"vysledek,omitempty" yaml:"vysledek,omitempty"`
	Dalsi    *AnoNeType        `xml:"dalsi,omitempty" json:"dalsi,omitempty" yaml:"dalsi,omitempty"`
	Zprava   *ZpravaType       `xml:"zprava,omitempty" json:"zprava,omitempty" yaml:"zprava,omitempty"`
}

// ZmenaType was auto-generated from WSDL.
type ZmenaType struct {
	Parcela        *ParcelaZpravaType       `xml:"parcela,omitempty" json:"parcela,omitempty" yaml:"parcela,omitempty"`
	Stavba         *StavbaZpravaType        `xml:"stavba,omitempty" json:"stavba,omitempty" yaml:"stavba,omitempty"`
	Jednotka       *JednotkaZpravaType      `xml:"jednotka,omitempty" json:"jednotka,omitempty" yaml:"jednotka,omitempty"`
	PravoStavby    *PravoStavbyZpravaType   `xml:"pravoStavby,omitempty" json:"pravoStavby,omitempty" yaml:"pravoStavby,omitempty"`
	JPV            *JpvZpravaType           `xml:"JPV,omitempty" json:"JPV,omitempty" yaml:"JPV,omitempty"`
	Vlastnictvi    *VlastnictviZpravaType   `xml:"vlastnictvi,omitempty" json:"vlastnictvi,omitempty" yaml:"vlastnictvi,omitempty"`
	OperaceRizeni  *OperaceRizeniZpravaType `xml:"operaceRizeni,omitempty" json:"operaceRizeni,omitempty" yaml:"operaceRizeni,omitempty"`
	UcastnikRizeni *OSBaseType              `xml:"ucastnikRizeni,omitempty" json:"ucastnikRizeni,omitempty" yaml:"ucastnikRizeni,omitempty"`
	DruhZmeny      DruhUdalostiType         `xml:"druhZmeny,attr,omitempty" json:"druhZmeny,attr,omitempty" yaml:"druhZmeny,attr,omitempty"`
}

// Zpráva ze serveru
type ZpravaServeruType struct {
	Content *TextType             `xml:"Content,omitempty" json:"Content,omitempty" yaml:"Content,omitempty"`
	Kod     uint                  `xml:"kod,attr,omitempty" json:"kod,attr,omitempty" yaml:"kod,attr,omitempty"`
	Uroven  ZpravaServeruTypeType `xml:"uroven,attr,omitempty" json:"uroven,attr,omitempty" yaml:"uroven,attr,omitempty"`
}

// ZpravaType was auto-generated from WSDL.
type ZpravaType struct {
	Notifikace        *NotifikaceType `xml:"notifikace,omitempty" json:"notifikace,omitempty" yaml:"notifikace,omitempty"`
	Notifikace        *NotifikaceType `xml:"notifikace,omitempty" json:"notifikace,omitempty" yaml:"notifikace,omitempty"`
	Notifikace        *NotifikaceType `xml:"notifikace,omitempty" json:"notifikace,omitempty" yaml:"notifikace,omitempty"`
	Id                IdType          `xml:"id,attr,omitempty" json:"id,attr,omitempty" yaml:"id,attr,omitempty"`
	DatumZpristupneni DateTime        `xml:"datumZpristupneni,attr,omitempty" json:"datumZpristupneni,attr,omitempty" yaml:"datumZpristupneni,attr,omitempty"`
}

// Rozšíření základních údajů stavby pro oznamovací službu.
type StavbaZpravaType struct {
	IdStavby             *IdType                  `xml:"idStavby,omitempty" json:"idStavby,omitempty" yaml:"idStavby,omitempty"`
	StavbaTypKod         *TypStavbyKodType        `xml:"stavbaTypKod,omitempty" json:"stavbaTypKod,omitempty" yaml:"stavbaTypKod,omitempty"`
	CastObce             *CastObceType            `xml:"castObce,omitempty" json:"castObce,omitempty" yaml:"castObce,omitempty"`
	CisloDomovni         *CisloDomovniType        `xml:"cisloDomovni,omitempty" json:"cisloDomovni,omitempty" yaml:"cisloDomovni,omitempty"`
	ZpuVyKod             *ZpusobVyuzitiStavbyType `xml:"zpuVyKod,omitempty" json:"zpuVyKod,omitempty" yaml:"zpuVyKod,omitempty"`
	ParcelaIdentifikacni *ParcelaIdentType        `xml:"parcelaIdentifikacni,omitempty" json:"parcelaIdentifikacni,omitempty" yaml:"parcelaIdentifikacni,omitempty"`
	LvId                 *IdType                  `xml:"lvId,omitempty" json:"lvId,omitempty" yaml:"lvId,omitempty"`
	JeSoucasti           *StavbaSoucastiType      `xml:"jeSoucasti,omitempty" json:"jeSoucasti,omitempty" yaml:"jeSoucasti,omitempty"`
	PravoStavby          *PravoStavbyIdentType    `xml:"pravoStavby,omitempty" json:"pravoStavby,omitempty" yaml:"pravoStavby,omitempty"`
	DocasnaStavba        *AnoNeType               `xml:"docasnaStavba,omitempty" json:"docasnaStavba,omitempty" yaml:"docasnaStavba,omitempty"`
	DatumPlomby          *DateTime                `xml:"datumPlomby,omitempty" json:"datumPlomby,omitempty" yaml:"datumPlomby,omitempty"`
	TypeAttrXSI          string                   `xml:"xsi:type,attr,omitempty"`
	TypeNamespace        string                   `xml:"xmlns:objtype,attr,omitempty"`

	OverrideTypeAttrXSI   *string `xml:"-"`
	OverrideTypeNamespace *string `xml:"-"`
}

// SetXMLType was auto-generated from WSDL.
func (t *StavbaZpravaType) SetXMLType() {
	if t.OverrideTypeAttrXSI != nil {
		t.TypeAttrXSI = *t.OverrideTypeAttrXSI
	} else {
		t.TypeAttrXSI = "objtype:stavbaZpravaType"
	}
	if t.OverrideTypeNamespace != nil {
		t.TypeNamespace = *t.OverrideTypeNamespace
	} else {
		t.TypeNamespace = "http://katastr.cuzk.cz/ozsNotifikace/types/v2.6"
	}
}

// Operation wrapper for VratNeodebraneZpravy.
// OperationVratNeodebraneZpravyRequestMsg was auto-generated from
// WSDL.
type OperationVratNeodebraneZpravyRequestMsg struct {
	VratNeodebraneZpravyRequest *VratNeodebraneZpravyRequest `xml:"vratNeodebraneZpravyRequest,omitempty" json:"vratNeodebraneZpravyRequest,omitempty" yaml:"vratNeodebraneZpravyRequest,omitempty"`
}

// Operation wrapper for VratNeodebraneZpravy.
// OperationVratNeodebraneZpravyResponseMsg was auto-generated
// from WSDL.
type OperationVratNeodebraneZpravyResponseMsg struct {
	VratNeodebraneZpravyResponse *VratNeodebraneZpravyResponse `xml:"vratNeodebraneZpravyResponse,omitempty" json:"vratNeodebraneZpravyResponse,omitempty" yaml:"vratNeodebraneZpravyResponse,omitempty"`
}

// Operation wrapper for VratOdebraneZpravy.
// OperationVratOdebraneZpravyRequestMsg was auto-generated from
// WSDL.
type OperationVratOdebraneZpravyRequestMsg struct {
	VratOdebraneZpravyRequest *VratOdebraneZpravyRequest `xml:"vratOdebraneZpravyRequest,omitempty" json:"vratOdebraneZpravyRequest,omitempty" yaml:"vratOdebraneZpravyRequest,omitempty"`
}

// Operation wrapper for VratOdebraneZpravy.
// OperationVratOdebraneZpravyResponseMsg was auto-generated from
// WSDL.
type OperationVratOdebraneZpravyResponseMsg struct {
	VratOdebraneZpravyResponse *VratOdebraneZpravyResponse `xml:"vratOdebraneZpravyResponse,omitempty" json:"vratOdebraneZpravyResponse,omitempty" yaml:"vratOdebraneZpravyResponse,omitempty"`
}

// ozsNotifikacePort implements the OzsNotifikacePort interface.
type ozsNotifikacePort struct {
	cli *soap.Client
}

// VratNeodebraneZpravy was auto-generated from WSDL.
func (p *ozsNotifikacePort) VratNeodebraneZpravy(VratNeodebraneZpravyRequest *VratNeodebraneZpravyRequestType) (*VratZpravyResponseType, error) {
	α := struct {
		OperationVratNeodebraneZpravyRequestMsg `xml:"tns:vratNeodebraneZpravy"`
	}{
		OperationVratNeodebraneZpravyRequestMsg{
			VratNeodebraneZpravyRequest,
		},
	}

	γ := struct {
		OperationVratNeodebraneZpravyResponseMsg `xml:"vratNeodebraneZpravyResponse"`
	}{}
	if err := p.cli.RoundTripWithAction("http://katastr.cuzk.cz/ozsNotifikaceWS/vratNeodebraneZpravy", α, &γ); err != nil {
		return nil, err
	}
	return γ.VratNeodebraneZpravyResponse, nil
}

// VratOdebraneZpravy was auto-generated from WSDL.
func (p *ozsNotifikacePort) VratOdebraneZpravy(VratOdebraneZpravyRequest *VratOdebraneZpravyRequestType) (*VratZpravyResponseType, error) {
	α := struct {
		OperationVratOdebraneZpravyRequestMsg `xml:"tns:vratOdebraneZpravy"`
	}{
		OperationVratOdebraneZpravyRequestMsg{
			VratOdebraneZpravyRequest,
		},
	}

	γ := struct {
		OperationVratOdebraneZpravyResponseMsg `xml:"vratOdebraneZpravyResponse"`
	}{}
	if err := p.cli.RoundTripWithAction("http://katastr.cuzk.cz/ozsNotifikaceWS/vratOdebraneZpravy", α, &γ); err != nil {
		return nil, err
	}
	return γ.VratOdebraneZpravyResponse, nil
}
